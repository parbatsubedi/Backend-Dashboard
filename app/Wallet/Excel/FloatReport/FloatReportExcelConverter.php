<?php


namespace App\Wallet\Excel\FloatReport;


use App\Wallet\AmountConverter;
use http\Env\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use PhpOffice\PhpSpreadsheet\Writer\Xls;

class FloatReportExcelConverter
{
    protected $data;
    protected $fromDate;
    protected $toDate;
    //Export file name
    protected $name;

    const STORAGE_UPLOAD_LOCATION = "app/public/csv/";
    const PUBLIC_UPLOAD_LOCATION = "csv/";
    const URL_LOCATION = "storage/csv/";

    public function __construct(array $data, $fromDate, $toDate)
    {
        if (!file_exists(storage_path(self::STORAGE_UPLOAD_LOCATION))) {
            mkdir(storage_path(self::STORAGE_UPLOAD_LOCATION), 0777, true);
        }
        $this->data = $data;
        $this->fromDate = $fromDate;
        $this->toDate = $toDate;
    }

    private function generateName()
    {
        $id = auth()->user()->id ?? rand(0, 999999);
        $this->name = "merchant-float-reports-" . time() . "-" . $id  . ".xls";
        return $this->name;
    }

    public function generate()
    {

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->mergeCells("A1:C4");

        $appName = strtolower(config('app.name'));
        $image = "";

        if($appName == 'sajilopay'){
            $image =  public_path('img/sajilopaylogo.png');
        } elseif($appName == 'icash'){
            $image =  public_path('img/icashlogo.png');
        } elseif($appName == 'dpaisa') {
            $image =  public_path('img/logo.png');
        }

        $drawing = new Drawing();
        $drawing->setName('Logo');
        $drawing->setDescription('Logo');
        $drawing->setPath($image);
        $drawing->setHeight(70);
        $drawing->setCoordinates('A1');
        $drawing->setWorksheet($sheet);

        //TITLE
        $sheet->setCellValue('A7', 'Float Report');
        $sheet->getStyle('A7')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle('A7')->getFont()->setBold(1)->setSize(16);
        $sheet->mergeCells("A7:L8");

        //DATES
//        if (isset($this->data[0]['created_at'])) {
//            $sheet->setCellValue('A7', 'From Date');
//            $sheet->getStyle('A7')->getFont()->setBold(1);
//            $sheet->setCellValue('B7', $this->data[0]['created_at']);
//        }
//
//        if (isset(end($this->data)['created_at'])) {
//            $sheet->setCellValue('C7', 'To Date');
//            $sheet->getStyle('C7')->getFont()->setBold(1);
//            $sheet->setCellValue('D7', end($this->data)['created_at']);
//        }
//
//        $sheet->setCellValue('A8', 'Generated On');
//        $sheet->getStyle('A8')->getFont()->setBold(1);
//        $sheet->setCellValue('B8', now()->toDateTimeString());

        if(!empty(auth()->user()->name)){
            $adminName = auth()->user()->name;
        }
        else{
            $adminName = "";
        }

        if(!empty(auth()->user()->mobile_no)){
            $adminMobileNo = auth()->user()->mobile_no;
        }
        else{
            $adminMobileNo = "";
        }

        //GENERATED BY
        $sheet->setCellValue('A5', 'Generated By');
        $sheet->getStyle('A5')->getFont()->setBold(1);
        $sheet->setCellValue('B5', $adminName . "(" . $adminMobileNo . ")");

        //FROM Date
        $sheet->setCellValue('A6', 'From Date');
        $sheet->getStyle('A6')->getFont()->setBold(1);
        $sheet->setCellValue('B6', $this->fromDate);

        //TO Date
        $sheet->setCellValue('C6', 'To Date');
        $sheet->getStyle('C6')->getFont()->setBold(1);
        $sheet->setCellValue('D6', $this->toDate);


        $tableStartRow = 9;
        $header = ['SN', 'Name of Merchant', 'Email', "Number", "Opening Balance", "Load", "Usage", "Closing Balance", "Credit", "Total Transaction", "Average Transaction Per Week", "Deposit Availability"];
        $sheet->fromArray([$header], null, 'A' . $tableStartRow);
        $highestColumn = $sheet->getHighestColumn();
        $sheet->getStyle('A'. $tableStartRow.':' . $highestColumn . $tableStartRow )
            ->getFont()
            ->setBold(1);


        $sn = 1;
        $rowIndex = $tableStartRow + 1;
        foreach ($this->data as $key=>$row) {
            $sheet->fromArray([
                $sn,
                $row['merchant_name'],
                $row['email'],
                $row['number'],
                $row['opening_balance'],
                $row['load'],
                $row['usage'],
                $row['closing_balance'],
                $row['credit'],
                $row['total_transaction'],
                $row['daily_average_transaction'],
                $row['deposit_availability']], null, 'A'.$rowIndex);
            $sn++;
            $rowIndex++;
        }

        $sheet->getRowDimension(1)->setRowHeight(-1); //auto
        $sheet->getColumnDimension('A')->setAutoSize(1); //auto
        $cols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];
        foreach ($cols as $col) {
            $sheet->getColumnDimension($col)->setAutoSize(1); //auto
        }

        $maxCol = $sheet->getHighestColumn();
        $maxRow = $sheet->getHighestRow();

        $sheet->getStyle('A1:' . $maxCol.$maxRow)
            ->getNumberFormat()
            ->setFormatCode(NumberFormat::FORMAT_TEXT);

        $filename = storage_path(self::STORAGE_UPLOAD_LOCATION . $this->generateName());

        $writer = new Xls($spreadsheet);
        $writer->save($filename);

        return $filename;
    }

    public function download()
    {
        try {
            $fileName = $this->generate();
            $headers = [
                'Content-Description' =>  'File Transfer',
                'Content-Type' => 'application/octet-stream',
                "Content-Transfer-Encoding" => "binary",
                'Content-Disposition' => "attachment; filename=$this->name"
            ];
            $url = Storage::disk('public')->path(self::PUBLIC_UPLOAD_LOCATION . $this->name);
            return response()->download($url, $this->name, $headers, "inline");
        } catch (\Exception $e) {
            Log::error($e, ['user' => auth()->user()]);
            return response()->json([
                'message' => "Error while generating report"
            ], 406);
        }
    }

    public function downloadUrl()
    {
        $fileName = $this->generate();
        return secure_asset(self::URL_LOCATION . $this->name);
    }
}

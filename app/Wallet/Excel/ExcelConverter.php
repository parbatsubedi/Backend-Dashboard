<?php


namespace App\Wallet\Excel;


use App\Wallet\AmountConverter;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use PhpOffice\PhpSpreadsheet\Writer\Xls;

class ExcelConverter
{
    protected $data;

    //Export file name
    protected $name;

    const STORAGE_UPLOAD_LOCATION = "app/public/csv/";
    const PUBLIC_UPLOAD_LOCATION = "csv/";
    const URL_LOCATION = "storage/csv/";

    public function __construct(array $data)
    {
        if (!file_exists(storage_path(self::STORAGE_UPLOAD_LOCATION))) {
            mkdir(storage_path(self::STORAGE_UPLOAD_LOCATION), 0777, true);
        }
        $this->data = $data;
    }

    private function generateName()
    {
        $id = auth()->user()->id ?? rand(0, 999999);
        $this->name = "reports-" . time() . "-" . $id  . ".xls";
        return $this->name;
    }

    public function generate(Request $request)
    {

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->mergeCells("A1:J4");

        if(config('redirect.logo') == 'sajilopay'){
            $image =  public_path('img/sajilopay_logo.png');
        } elseif(config('redirect.logo') == 'icash'){
            $image =  public_path('img/icash_logo.png');
        } elseif(config('redirect.logo') == 'dpaisa') {
            $image =  public_path('img/dpaisa_logo.png');
        }

        $drawing = new Drawing();
        $drawing->setName('Logo');
        $drawing->setDescription('Logo');
        $drawing->setPath($image);
        $drawing->setHeight(70);
        $drawing->setCoordinates('A1');
        $drawing->setWorksheet($sheet);

        //TITLE
        $sheet->setCellValue('A5', 'Transaction Report');
        $sheet->getStyle('A5')->getFont()->setBold(1)->setSize(16);
        $sheet->mergeCells("A5:J5");

        //DATES
        if (isset($this->data[0]['created_at'])) {
            $sheet->setCellValue('A7', 'From Date');
            $sheet->getStyle('A7')->getFont()->setBold(1);
            $sheet->setCellValue('B7', $this->data[0]['created_at']);
        }

        if (isset(end($this->data)['created_at'])) {
            $sheet->setCellValue('C7', 'To Date');
            $sheet->getStyle('C7')->getFont()->setBold(1);
            $sheet->setCellValue('D7', end($this->data)['created_at']);
        }

        $sheet->setCellValue('A8', 'Generated On');
        $sheet->getStyle('A8')->getFont()->setBold(1);
        $sheet->setCellValue('B8', now()->toDateTimeString());

        //GENERATED BY
        $sheet->setCellValue('A9', 'Generate By');
        $sheet->getStyle('A9')->getFont()->setBold(1);
        $sheet->setCellValue('B9', auth()->user()->name . "(" . auth()->user()->mobile_no . ")");


        $tableStartRow = 12;
        $header = ['SN', 'Vendor', 'Service Type', "Account", "Debit", "Credit", "Amount", "Wallet Balance", 'Date', "Time"];
        $sheet->fromArray([$header], null, 'A' . $tableStartRow);
        $highestColumn = $sheet->getHighestColumn();
        $sheet->getStyle('A'. $tableStartRow.':' . $highestColumn . $tableStartRow )->getFont()->setBold(1);

        $sn = 1;
        $rowIndex = $tableStartRow + 1;
        foreach ($this->data as $row) {
            $balance = AmountConverter::paisaToRs($row["balance"]);
            $debit = AmountConverter::paisaToRs($row["debit"]);
            $credit = AmountConverter::paisaToRs($row["credit"]);
            $amount = AmountConverter::paisaToRs($row["amount"]);
            $date = explode(" ", date('Y-m-d H:i:s', strtotime($row['created_at'])));
            $account = str_replace('977', '', $row["account"]);
            $sheet->fromArray([$sn, $row['vendor'], $row['service_type'], $account, $debit, $credit, $amount, $balance, $date[0], $date[1]], null, 'A'.$rowIndex);
            $sn++;
            $rowIndex++;
        }

        $sheet->getRowDimension(1)->setRowHeight(-1); //auto
        $sheet->getColumnDimension('A')->setAutoSize(1); //auto
        $cols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
        foreach ($cols as $col) {
            $sheet->getColumnDimension($col)->setAutoSize(1); //auto
        }

        $maxCol = $sheet->getHighestColumn();
        $maxRow = $sheet->getHighestRow();

        /*$sheet->getStyle('A1:' . $maxCol.$maxRow)
            ->getNumberFormat()
            ->setFormatCode(NumberFormat::FORMAT_TEXT);*/

        $filename = storage_path(self::STORAGE_UPLOAD_LOCATION . $this->generateName());

        $writer = new Xls($spreadsheet);
        $writer->save($filename);

        return $filename;
    }

    public function download()
    {
        try {
            $fileName = $this->generate();
            $headers = [
                'Content-Description' =>  'File Transfer',
                'Content-Type' => 'application/octet-stream',
                "Content-Transfer-Encoding" => "binary",
                'Content-Disposition' => "attachment; filename=$this->name"
            ];
            $url = Storage::disk('public')->path(self::PUBLIC_UPLOAD_LOCATION . $this->name);
            return response()->download($url, $this->name, $headers, "inline");
        } catch (\Exception $e) {
            Log::error($e, ['user' => auth()->user()]);
            return response()->json([
                'message' => "Error while generating report"
            ], 406);
        }
    }

    public function downloadUrl()
    {
        $fileName = $this->generate();
        return secure_asset(self::URL_LOCATION . $this->name);
    }
}
